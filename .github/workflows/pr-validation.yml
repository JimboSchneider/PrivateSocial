name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better code analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: PrivateSocial.Web.React/package-lock.json

    # Build and Test .NET
    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Build .NET
      run: dotnet build --no-restore --configuration Release

    - name: Run .NET tests with coverage
      run: |
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --logger "trx;LogFileName=test-results.trx" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

    - name: Generate .NET coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: '**/coverage.opencover.xml'
        targetdir: 'coverage-report'
        reporttypes: 'HtmlInline;Cobertura'

    # Build and Test React with Vite
    - name: Install Node dependencies
      working-directory: ./PrivateSocial.Web.React
      run: npm ci

    - name: Lint React code
      working-directory: ./PrivateSocial.Web.React
      run: npm run lint

    - name: Run React tests with Vitest
      working-directory: ./PrivateSocial.Web.React
      run: npm run test:unit -- --run --coverage

    - name: Build React app with Vite
      working-directory: ./PrivateSocial.Web.React
      run: npm run build

    - name: Check Vite build output
      working-directory: ./PrivateSocial.Web.React
      run: |
        echo "Build output size:"
        du -sh dist/
        echo "Files in dist:"
        ls -la dist/

    # Code Quality Checks
    - name: Check for large files
      run: |
        find . -type f -size +1M -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./dist/*" -not -path "./bin/*" -not -path "./obj/*" | while read file; do
          echo "::warning file=$file::Large file detected (>1MB): $file"
        done

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha }}
        head: ${{ github.event.pull_request.head.sha }}

    # Upload artifacts
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/TestResults/*.trx
          **/coverage.opencover.xml
          coverage-report/
          PrivateSocial.Web.React/coverage/
        retention-days: 7

    - name: Upload Vite build
      uses: actions/upload-artifact@v4
      with:
        name: vite-build
        path: PrivateSocial.Web.React/dist/
        retention-days: 7

    # Comment on PR with results
    - name: Add PR comment with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          let comment = '## PR Validation Results\n\n';
          
          // Add build status
          comment += '✅ Build successful\n';
          comment += '✅ All tests passed\n';
          comment += '✅ Linting passed\n\n';
          
          // Add coverage info if available
          comment += '### Code Coverage\n';
          comment += 'Coverage reports have been generated and uploaded as artifacts.\n\n';
          
          // Add security reminder
          comment += '### Security Checklist\n';
          comment += '- [ ] No hardcoded secrets\n';
          comment += '- [ ] Dependencies are up to date\n';
          comment += '- [ ] SQL injection prevention verified\n';
          comment += '- [ ] Authentication properly implemented\n\n';
          
          // Add trunk-based development reminder
          comment += '### Trunk-Based Development\n';
          comment += '- [ ] PR is small and focused\n';
          comment += '- [ ] Feature flags used for incomplete features\n';
          comment += '- [ ] No long-lived feature branches\n';
          comment += '- [ ] Ready to merge to main within 24 hours\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });