name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

concurrency:
  group: pr-validation-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      e2e: ${{ steps.filter.outputs.e2e }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          backend:
            - '**.cs'
            - '**.csproj'
            - '**/appsettings*.json'
            - '.github/workflows/backend-validation.yml'
            - '.github/workflows/pr-validation.yml'
          frontend:
            - 'PrivateSocial.Web.React/**'
            - '.github/workflows/frontend-validation.yml'
            - '.github/workflows/pr-validation.yml'
          e2e:
            - 'PrivateSocial.Web.React/**'
            - 'PrivateSocial.ApiService/**'
            - '.github/workflows/e2e-validation.yml'
            - '.github/workflows/pr-validation.yml'

  backend:
    name: Backend Validation
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    uses: ./.github/workflows/backend-validation.yml
    secrets: inherit

  frontend:
    name: Frontend Validation
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    uses: ./.github/workflows/frontend-validation.yml
    secrets: inherit

  e2e:
    name: E2E Tests
    needs: changes
    if: needs.changes.outputs.e2e == 'true'
    uses: ./.github/workflows/e2e-validation.yml
    secrets: inherit

  validation-status:
    name: PR Validation Status
    runs-on: ubuntu-latest
    needs: [changes, backend, frontend, e2e]
    if: always()
    steps:
    - name: Check validation results
      run: |
        echo "PR Validation Summary"
        echo "====================="
        
        # Check if any required jobs were skipped
        BACKEND_CHANGED="${{ needs.changes.outputs.backend }}"
        FRONTEND_CHANGED="${{ needs.changes.outputs.frontend }}"
        E2E_CHANGED="${{ needs.changes.outputs.e2e }}"
        
        # Check job results
        BACKEND_RESULT="${{ needs.backend.result }}"
        FRONTEND_RESULT="${{ needs.frontend.result }}"
        E2E_RESULT="${{ needs.e2e.result }}"
        
        # Print status
        if [[ "$BACKEND_CHANGED" == "true" ]]; then
          echo "✓ Backend: $BACKEND_RESULT"
          if [[ "$BACKEND_RESULT" != "success" && "$BACKEND_RESULT" != "skipped" ]]; then
            echo "  ⚠️ Backend validation failed"
          fi
        else
          echo "○ Backend: No changes detected"
        fi
        
        if [[ "$FRONTEND_CHANGED" == "true" ]]; then
          echo "✓ Frontend: $FRONTEND_RESULT"
          if [[ "$FRONTEND_RESULT" != "success" && "$FRONTEND_RESULT" != "skipped" ]]; then
            echo "  ⚠️ Frontend validation failed"
          fi
        else
          echo "○ Frontend: No changes detected"
        fi
        
        if [[ "$E2E_CHANGED" == "true" ]]; then
          echo "✓ E2E Tests: $E2E_RESULT"
          if [[ "$E2E_RESULT" != "success" && "$E2E_RESULT" != "skipped" ]]; then
            echo "  ⚠️ E2E tests failed"
          fi
        else
          echo "○ E2E Tests: No changes detected"
        fi
        
        # Determine overall status
        OVERALL_STATUS="success"
        
        if [[ "$BACKEND_CHANGED" == "true" && "$BACKEND_RESULT" != "success" && "$BACKEND_RESULT" != "skipped" ]]; then
          OVERALL_STATUS="failure"
        fi
        
        if [[ "$FRONTEND_CHANGED" == "true" && "$FRONTEND_RESULT" != "success" && "$FRONTEND_RESULT" != "skipped" ]]; then
          OVERALL_STATUS="failure"
        fi
        
        if [[ "$E2E_CHANGED" == "true" && "$E2E_RESULT" != "success" && "$E2E_RESULT" != "skipped" ]]; then
          OVERALL_STATUS="failure"
        fi
        
        echo ""
        echo "Overall Status: $OVERALL_STATUS"
        
        if [[ "$OVERALL_STATUS" != "success" ]]; then
          echo "❌ PR validation failed. Please check the failing jobs above."
          exit 1
        else
          echo "✅ All PR validations passed!"
        fi

    - name: Add PR comment with results
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const backend = '${{ needs.backend.result }}';
          const frontend = '${{ needs.frontend.result }}';
          const e2e = '${{ needs.e2e.result }}';
          const backendChanged = '${{ needs.changes.outputs.backend }}' === 'true';
          const frontendChanged = '${{ needs.changes.outputs.frontend }}' === 'true';
          const e2eChanged = '${{ needs.changes.outputs.e2e }}' === 'true';
          
          const getStatusEmoji = (result, changed) => {
            if (!changed) return '○';
            if (result === 'success') return '✅';
            if (result === 'failure') return '❌';
            if (result === 'cancelled') return '⚠️';
            return '⏳';
          };
          
          const getStatusText = (result, changed) => {
            if (!changed) return 'No changes';
            if (result === 'success') return 'Passed';
            if (result === 'failure') return 'Failed';
            if (result === 'cancelled') return 'Cancelled';
            return 'Pending';
          };
          
          const body = `## PR Validation Results
          
          | Check | Status | Result |
          |-------|--------|--------|
          | Backend | ${getStatusEmoji(backend, backendChanged)} | ${getStatusText(backend, backendChanged)} |
          | Frontend | ${getStatusEmoji(frontend, frontendChanged)} | ${getStatusText(frontend, frontendChanged)} |
          | E2E Tests | ${getStatusEmoji(e2e, e2eChanged)} | ${getStatusText(e2e, e2eChanged)} |
          
          _Last updated: ${new Date().toISOString()}_`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## PR Validation Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }